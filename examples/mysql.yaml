---
title: Top-of-funnel report

outputs:
  html:
    plugin: html

  smtp:
    plugin: smtp
    args:
      smtp_host: smtp
      smtp_port: 1025
      image_strategy: remote
      image_remote_base_url: http://localhost:8080/latest
      email_from: sender@reportcard.dev
      email_to:
        - recipient@reportcard.dev

datasources:
  db:
    plugin: mysql
    args:
      host: mysql
      user: reportcard
      passwd: reportcard_pass

views:
  # Show a time series of user signups over the report period.
  signups_over_time:
    plugin: plot
    title: Total sign-ups
    args:
      datasource: db
      query: |
        select created_at,
        count(*) over (order by created_at)
          + (select count(*) from reportcard.signups where created_at < {from})
          as total_signups
        from reportcard.signups
        where created_at >= {from} and created_at < {to}
  new_signups:
    plugin: plot
    title: Daily new sign-ups
    cols: 4
    args:
      kind: bar
      datasource: db
      query: |
        select date_format(created_at, '%%Y-%%m-%%d') as day, count(*) as daily_total
        from reportcard.signups
        where created_at >= {from} and created_at < {to}
        group by day(created_at)
      query_args:
        # Because we're roughly grouping by day, and not a full date time,
        # automatic parsing of dates doesn't quite work, so we need to give
        # a bit of help to say which columns should be treated as dates.
        parse_dates: ['day']
  # Additionally, show a stat indicating how much the total signups have
  # increased (or decreased) in comparison to the previous report period.
  signups_change:
    plugin: single_stat
    title: Week total
    cols: 2
    args:
      datasource: db
      query: |
        select count(*) from reportcard.signups
        where created_at >= {from} and created_at < {to}
      comparison_query: |
        select count(*) from reportcard.signups
        where created_at >= date_sub({from}, {interval})
          and created_at < {from}
      comparison_type: percent
      # comparison_type: raw
